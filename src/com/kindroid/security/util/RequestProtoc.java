// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RequestProtoc.proto

package com.kindroid.security.util;

public final class RequestProtoc {
  private RequestProtoc() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public static final class RequestContext extends
      com.google.protobuf.GeneratedMessage {
    // Use RequestContext.newBuilder() to construct.
    private RequestContext() {
      initFields();
    }
    private RequestContext(boolean noInit) {}
    
    private static final RequestContext defaultInstance;
    public static RequestContext getDefaultInstance() {
      return defaultInstance;
    }
    
    public RequestContext getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.kindroid.security.util.RequestProtoc.internal_static_com_kindroid_security_util_RequestContext_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.kindroid.security.util.RequestProtoc.internal_static_com_kindroid_security_util_RequestContext_fieldAccessorTable;
    }
    
    // optional string authToken = 1;
    public static final int AUTHTOKEN_FIELD_NUMBER = 1;
    private boolean hasAuthToken;
    private java.lang.String authToken_ = "";
    public boolean hasAuthToken() { return hasAuthToken; }
    public java.lang.String getAuthToken() { return authToken_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasAuthToken()) {
        output.writeString(1, getAuthToken());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasAuthToken()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getAuthToken());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.kindroid.security.util.RequestProtoc.RequestContext parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.kindroid.security.util.RequestProtoc.RequestContext parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.kindroid.security.util.RequestProtoc.RequestContext parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.kindroid.security.util.RequestProtoc.RequestContext parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.kindroid.security.util.RequestProtoc.RequestContext parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.kindroid.security.util.RequestProtoc.RequestContext parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.kindroid.security.util.RequestProtoc.RequestContext parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.kindroid.security.util.RequestProtoc.RequestContext parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.kindroid.security.util.RequestProtoc.RequestContext parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.kindroid.security.util.RequestProtoc.RequestContext parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.kindroid.security.util.RequestProtoc.RequestContext prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.kindroid.security.util.RequestProtoc.RequestContext result;
      
      // Construct using com.kindroid.security.util.RequestProtoc.RequestContext.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.kindroid.security.util.RequestProtoc.RequestContext();
        return builder;
      }
      
      protected com.kindroid.security.util.RequestProtoc.RequestContext internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.kindroid.security.util.RequestProtoc.RequestContext();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.kindroid.security.util.RequestProtoc.RequestContext.getDescriptor();
      }
      
      public com.kindroid.security.util.RequestProtoc.RequestContext getDefaultInstanceForType() {
        return com.kindroid.security.util.RequestProtoc.RequestContext.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.kindroid.security.util.RequestProtoc.RequestContext build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.kindroid.security.util.RequestProtoc.RequestContext buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.kindroid.security.util.RequestProtoc.RequestContext buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.kindroid.security.util.RequestProtoc.RequestContext returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.kindroid.security.util.RequestProtoc.RequestContext) {
          return mergeFrom((com.kindroid.security.util.RequestProtoc.RequestContext)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.kindroid.security.util.RequestProtoc.RequestContext other) {
        if (other == com.kindroid.security.util.RequestProtoc.RequestContext.getDefaultInstance()) return this;
        if (other.hasAuthToken()) {
          setAuthToken(other.getAuthToken());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              setAuthToken(input.readString());
              break;
            }
          }
        }
      }
      
      
      // optional string authToken = 1;
      public boolean hasAuthToken() {
        return result.hasAuthToken();
      }
      public java.lang.String getAuthToken() {
        return result.getAuthToken();
      }
      public Builder setAuthToken(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasAuthToken = true;
        result.authToken_ = value;
        return this;
      }
      public Builder clearAuthToken() {
        result.hasAuthToken = false;
        result.authToken_ = getDefaultInstance().getAuthToken();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.kindroid.security.util.RequestContext)
    }
    
    static {
      defaultInstance = new RequestContext(true);
      com.kindroid.security.util.RequestProtoc.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.kindroid.security.util.RequestContext)
  }
  
  public static final class Request extends
      com.google.protobuf.GeneratedMessage {
    // Use Request.newBuilder() to construct.
    private Request() {
      initFields();
    }
    private Request(boolean noInit) {}
    
    private static final Request defaultInstance;
    public static Request getDefaultInstance() {
      return defaultInstance;
    }
    
    public Request getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.kindroid.security.util.RequestProtoc.internal_static_com_kindroid_security_util_Request_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.kindroid.security.util.RequestProtoc.internal_static_com_kindroid_security_util_Request_fieldAccessorTable;
    }
    
    // optional .com.kindroid.security.util.RequestContext context = 1;
    public static final int CONTEXT_FIELD_NUMBER = 1;
    private boolean hasContext;
    private com.kindroid.security.util.RequestProtoc.RequestContext context_;
    public boolean hasContext() { return hasContext; }
    public com.kindroid.security.util.RequestProtoc.RequestContext getContext() { return context_; }
    
    // optional .com.kindroid.security.util.AccountRequest accountRequest = 2;
    public static final int ACCOUNTREQUEST_FIELD_NUMBER = 2;
    private boolean hasAccountRequest;
    private com.kindroid.security.util.AccountProtoc.AccountRequest accountRequest_;
    public boolean hasAccountRequest() { return hasAccountRequest; }
    public com.kindroid.security.util.AccountProtoc.AccountRequest getAccountRequest() { return accountRequest_; }
    
    // optional .com.kindroid.security.util.EmailRequest emailRequest = 3;
    public static final int EMAILREQUEST_FIELD_NUMBER = 3;
    private boolean hasEmailRequest;
    private com.kindroid.security.util.EmailProtoc.EmailRequest emailRequest_;
    public boolean hasEmailRequest() { return hasEmailRequest; }
    public com.kindroid.security.util.EmailProtoc.EmailRequest getEmailRequest() { return emailRequest_; }
    
    // optional .com.kindroid.security.util.FeedbackRequest feedbackRequest = 4;
    public static final int FEEDBACKREQUEST_FIELD_NUMBER = 4;
    private boolean hasFeedbackRequest;
    private com.kindroid.security.util.FeedbackProtoc.FeedbackRequest feedbackRequest_;
    public boolean hasFeedbackRequest() { return hasFeedbackRequest; }
    public com.kindroid.security.util.FeedbackProtoc.FeedbackRequest getFeedbackRequest() { return feedbackRequest_; }
    
    // optional .com.kindroid.security.util.AppSearchRequest appSearchRequest = 5;
    public static final int APPSEARCHREQUEST_FIELD_NUMBER = 5;
    private boolean hasAppSearchRequest;
    private com.kindroid.security.util.AppProtoc.AppSearchRequest appSearchRequest_;
    public boolean hasAppSearchRequest() { return hasAppSearchRequest; }
    public com.kindroid.security.util.AppProtoc.AppSearchRequest getAppSearchRequest() { return appSearchRequest_; }
    
    // optional .com.kindroid.security.util.TopicRequest topicRequest = 6;
    public static final int TOPICREQUEST_FIELD_NUMBER = 6;
    private boolean hasTopicRequest;
    private com.kindroid.security.util.TopicProtoc.TopicRequest topicRequest_;
    public boolean hasTopicRequest() { return hasTopicRequest; }
    public com.kindroid.security.util.TopicProtoc.TopicRequest getTopicRequest() { return topicRequest_; }
    
    // optional .com.kindroid.security.util.TopicAppRequest topicAppRequest = 7;
    public static final int TOPICAPPREQUEST_FIELD_NUMBER = 7;
    private boolean hasTopicAppRequest;
    private com.kindroid.security.util.TopicProtoc.TopicAppRequest topicAppRequest_;
    public boolean hasTopicAppRequest() { return hasTopicAppRequest; }
    public com.kindroid.security.util.TopicProtoc.TopicAppRequest getTopicAppRequest() { return topicAppRequest_; }
    
    // optional .com.kindroid.security.util.BannerRequest bannerRequest = 8;
    public static final int BANNERREQUEST_FIELD_NUMBER = 8;
    private boolean hasBannerRequest;
    private com.kindroid.security.util.ADProtoc.BannerRequest bannerRequest_;
    public boolean hasBannerRequest() { return hasBannerRequest; }
    public com.kindroid.security.util.ADProtoc.BannerRequest getBannerRequest() { return bannerRequest_; }
    
    // optional .com.kindroid.security.util.PasswordRequest passwordRequest = 9;
    public static final int PASSWORDREQUEST_FIELD_NUMBER = 9;
    private boolean hasPasswordRequest;
    private com.kindroid.security.util.AccountProtoc.PasswordRequest passwordRequest_;
    public boolean hasPasswordRequest() { return hasPasswordRequest; }
    public com.kindroid.security.util.AccountProtoc.PasswordRequest getPasswordRequest() { return passwordRequest_; }
    
    // optional .com.kindroid.security.util.ClickRequest clickRequest = 10;
    public static final int CLICKREQUEST_FIELD_NUMBER = 10;
    private boolean hasClickRequest;
    private com.kindroid.security.util.ADProtoc.ClickRequest clickRequest_;
    public boolean hasClickRequest() { return hasClickRequest; }
    public com.kindroid.security.util.ADProtoc.ClickRequest getClickRequest() { return clickRequest_; }
    
    // optional .com.kindroid.security.util.TopicClickRequest topicClickRequest = 11;
    public static final int TOPICCLICKREQUEST_FIELD_NUMBER = 11;
    private boolean hasTopicClickRequest;
    private com.kindroid.security.util.TopicProtoc.TopicClickRequest topicClickRequest_;
    public boolean hasTopicClickRequest() { return hasTopicClickRequest; }
    public com.kindroid.security.util.TopicProtoc.TopicClickRequest getTopicClickRequest() { return topicClickRequest_; }
    
    // optional .com.kindroid.security.util.CategoryClickRequest categoryClickRequest = 12;
    public static final int CATEGORYCLICKREQUEST_FIELD_NUMBER = 12;
    private boolean hasCategoryClickRequest;
    private com.kindroid.security.util.CategoryProtoc.CategoryClickRequest categoryClickRequest_;
    public boolean hasCategoryClickRequest() { return hasCategoryClickRequest; }
    public com.kindroid.security.util.CategoryProtoc.CategoryClickRequest getCategoryClickRequest() { return categoryClickRequest_; }
    
    private void initFields() {
      context_ = com.kindroid.security.util.RequestProtoc.RequestContext.getDefaultInstance();
      accountRequest_ = com.kindroid.security.util.AccountProtoc.AccountRequest.getDefaultInstance();
      emailRequest_ = com.kindroid.security.util.EmailProtoc.EmailRequest.getDefaultInstance();
      feedbackRequest_ = com.kindroid.security.util.FeedbackProtoc.FeedbackRequest.getDefaultInstance();
      appSearchRequest_ = com.kindroid.security.util.AppProtoc.AppSearchRequest.getDefaultInstance();
      topicRequest_ = com.kindroid.security.util.TopicProtoc.TopicRequest.getDefaultInstance();
      topicAppRequest_ = com.kindroid.security.util.TopicProtoc.TopicAppRequest.getDefaultInstance();
      bannerRequest_ = com.kindroid.security.util.ADProtoc.BannerRequest.getDefaultInstance();
      passwordRequest_ = com.kindroid.security.util.AccountProtoc.PasswordRequest.getDefaultInstance();
      clickRequest_ = com.kindroid.security.util.ADProtoc.ClickRequest.getDefaultInstance();
      topicClickRequest_ = com.kindroid.security.util.TopicProtoc.TopicClickRequest.getDefaultInstance();
      categoryClickRequest_ = com.kindroid.security.util.CategoryProtoc.CategoryClickRequest.getDefaultInstance();
    }
    public final boolean isInitialized() {
      if (hasAccountRequest()) {
        if (!getAccountRequest().isInitialized()) return false;
      }
      if (hasEmailRequest()) {
        if (!getEmailRequest().isInitialized()) return false;
      }
      if (hasFeedbackRequest()) {
        if (!getFeedbackRequest().isInitialized()) return false;
      }
      if (hasTopicAppRequest()) {
        if (!getTopicAppRequest().isInitialized()) return false;
      }
      if (hasBannerRequest()) {
        if (!getBannerRequest().isInitialized()) return false;
      }
      if (hasPasswordRequest()) {
        if (!getPasswordRequest().isInitialized()) return false;
      }
      if (hasClickRequest()) {
        if (!getClickRequest().isInitialized()) return false;
      }
      if (hasTopicClickRequest()) {
        if (!getTopicClickRequest().isInitialized()) return false;
      }
      if (hasCategoryClickRequest()) {
        if (!getCategoryClickRequest().isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasContext()) {
        output.writeMessage(1, getContext());
      }
      if (hasAccountRequest()) {
        output.writeMessage(2, getAccountRequest());
      }
      if (hasEmailRequest()) {
        output.writeMessage(3, getEmailRequest());
      }
      if (hasFeedbackRequest()) {
        output.writeMessage(4, getFeedbackRequest());
      }
      if (hasAppSearchRequest()) {
        output.writeMessage(5, getAppSearchRequest());
      }
      if (hasTopicRequest()) {
        output.writeMessage(6, getTopicRequest());
      }
      if (hasTopicAppRequest()) {
        output.writeMessage(7, getTopicAppRequest());
      }
      if (hasBannerRequest()) {
        output.writeMessage(8, getBannerRequest());
      }
      if (hasPasswordRequest()) {
        output.writeMessage(9, getPasswordRequest());
      }
      if (hasClickRequest()) {
        output.writeMessage(10, getClickRequest());
      }
      if (hasTopicClickRequest()) {
        output.writeMessage(11, getTopicClickRequest());
      }
      if (hasCategoryClickRequest()) {
        output.writeMessage(12, getCategoryClickRequest());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasContext()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getContext());
      }
      if (hasAccountRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getAccountRequest());
      }
      if (hasEmailRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getEmailRequest());
      }
      if (hasFeedbackRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getFeedbackRequest());
      }
      if (hasAppSearchRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getAppSearchRequest());
      }
      if (hasTopicRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getTopicRequest());
      }
      if (hasTopicAppRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getTopicAppRequest());
      }
      if (hasBannerRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, getBannerRequest());
      }
      if (hasPasswordRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, getPasswordRequest());
      }
      if (hasClickRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, getClickRequest());
      }
      if (hasTopicClickRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, getTopicClickRequest());
      }
      if (hasCategoryClickRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(12, getCategoryClickRequest());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.kindroid.security.util.RequestProtoc.Request parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.kindroid.security.util.RequestProtoc.Request parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.kindroid.security.util.RequestProtoc.Request parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.kindroid.security.util.RequestProtoc.Request parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.kindroid.security.util.RequestProtoc.Request parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.kindroid.security.util.RequestProtoc.Request parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.kindroid.security.util.RequestProtoc.Request parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.kindroid.security.util.RequestProtoc.Request parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.kindroid.security.util.RequestProtoc.Request parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.kindroid.security.util.RequestProtoc.Request parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.kindroid.security.util.RequestProtoc.Request prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.kindroid.security.util.RequestProtoc.Request result;
      
      // Construct using com.kindroid.security.util.RequestProtoc.Request.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.kindroid.security.util.RequestProtoc.Request();
        return builder;
      }
      
      protected com.kindroid.security.util.RequestProtoc.Request internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.kindroid.security.util.RequestProtoc.Request();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.kindroid.security.util.RequestProtoc.Request.getDescriptor();
      }
      
      public com.kindroid.security.util.RequestProtoc.Request getDefaultInstanceForType() {
        return com.kindroid.security.util.RequestProtoc.Request.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.kindroid.security.util.RequestProtoc.Request build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.kindroid.security.util.RequestProtoc.Request buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.kindroid.security.util.RequestProtoc.Request buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.kindroid.security.util.RequestProtoc.Request returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.kindroid.security.util.RequestProtoc.Request) {
          return mergeFrom((com.kindroid.security.util.RequestProtoc.Request)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.kindroid.security.util.RequestProtoc.Request other) {
        if (other == com.kindroid.security.util.RequestProtoc.Request.getDefaultInstance()) return this;
        if (other.hasContext()) {
          mergeContext(other.getContext());
        }
        if (other.hasAccountRequest()) {
          mergeAccountRequest(other.getAccountRequest());
        }
        if (other.hasEmailRequest()) {
          mergeEmailRequest(other.getEmailRequest());
        }
        if (other.hasFeedbackRequest()) {
          mergeFeedbackRequest(other.getFeedbackRequest());
        }
        if (other.hasAppSearchRequest()) {
          mergeAppSearchRequest(other.getAppSearchRequest());
        }
        if (other.hasTopicRequest()) {
          mergeTopicRequest(other.getTopicRequest());
        }
        if (other.hasTopicAppRequest()) {
          mergeTopicAppRequest(other.getTopicAppRequest());
        }
        if (other.hasBannerRequest()) {
          mergeBannerRequest(other.getBannerRequest());
        }
        if (other.hasPasswordRequest()) {
          mergePasswordRequest(other.getPasswordRequest());
        }
        if (other.hasClickRequest()) {
          mergeClickRequest(other.getClickRequest());
        }
        if (other.hasTopicClickRequest()) {
          mergeTopicClickRequest(other.getTopicClickRequest());
        }
        if (other.hasCategoryClickRequest()) {
          mergeCategoryClickRequest(other.getCategoryClickRequest());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              com.kindroid.security.util.RequestProtoc.RequestContext.Builder subBuilder = com.kindroid.security.util.RequestProtoc.RequestContext.newBuilder();
              if (hasContext()) {
                subBuilder.mergeFrom(getContext());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setContext(subBuilder.buildPartial());
              break;
            }
            case 18: {
              com.kindroid.security.util.AccountProtoc.AccountRequest.Builder subBuilder = com.kindroid.security.util.AccountProtoc.AccountRequest.newBuilder();
              if (hasAccountRequest()) {
                subBuilder.mergeFrom(getAccountRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setAccountRequest(subBuilder.buildPartial());
              break;
            }
            case 26: {
              com.kindroid.security.util.EmailProtoc.EmailRequest.Builder subBuilder = com.kindroid.security.util.EmailProtoc.EmailRequest.newBuilder();
              if (hasEmailRequest()) {
                subBuilder.mergeFrom(getEmailRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setEmailRequest(subBuilder.buildPartial());
              break;
            }
            case 34: {
              com.kindroid.security.util.FeedbackProtoc.FeedbackRequest.Builder subBuilder = com.kindroid.security.util.FeedbackProtoc.FeedbackRequest.newBuilder();
              if (hasFeedbackRequest()) {
                subBuilder.mergeFrom(getFeedbackRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setFeedbackRequest(subBuilder.buildPartial());
              break;
            }
            case 42: {
              com.kindroid.security.util.AppProtoc.AppSearchRequest.Builder subBuilder = com.kindroid.security.util.AppProtoc.AppSearchRequest.newBuilder();
              if (hasAppSearchRequest()) {
                subBuilder.mergeFrom(getAppSearchRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setAppSearchRequest(subBuilder.buildPartial());
              break;
            }
            case 50: {
              com.kindroid.security.util.TopicProtoc.TopicRequest.Builder subBuilder = com.kindroid.security.util.TopicProtoc.TopicRequest.newBuilder();
              if (hasTopicRequest()) {
                subBuilder.mergeFrom(getTopicRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setTopicRequest(subBuilder.buildPartial());
              break;
            }
            case 58: {
              com.kindroid.security.util.TopicProtoc.TopicAppRequest.Builder subBuilder = com.kindroid.security.util.TopicProtoc.TopicAppRequest.newBuilder();
              if (hasTopicAppRequest()) {
                subBuilder.mergeFrom(getTopicAppRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setTopicAppRequest(subBuilder.buildPartial());
              break;
            }
            case 66: {
              com.kindroid.security.util.ADProtoc.BannerRequest.Builder subBuilder = com.kindroid.security.util.ADProtoc.BannerRequest.newBuilder();
              if (hasBannerRequest()) {
                subBuilder.mergeFrom(getBannerRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setBannerRequest(subBuilder.buildPartial());
              break;
            }
            case 74: {
              com.kindroid.security.util.AccountProtoc.PasswordRequest.Builder subBuilder = com.kindroid.security.util.AccountProtoc.PasswordRequest.newBuilder();
              if (hasPasswordRequest()) {
                subBuilder.mergeFrom(getPasswordRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setPasswordRequest(subBuilder.buildPartial());
              break;
            }
            case 82: {
              com.kindroid.security.util.ADProtoc.ClickRequest.Builder subBuilder = com.kindroid.security.util.ADProtoc.ClickRequest.newBuilder();
              if (hasClickRequest()) {
                subBuilder.mergeFrom(getClickRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setClickRequest(subBuilder.buildPartial());
              break;
            }
            case 90: {
              com.kindroid.security.util.TopicProtoc.TopicClickRequest.Builder subBuilder = com.kindroid.security.util.TopicProtoc.TopicClickRequest.newBuilder();
              if (hasTopicClickRequest()) {
                subBuilder.mergeFrom(getTopicClickRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setTopicClickRequest(subBuilder.buildPartial());
              break;
            }
            case 98: {
              com.kindroid.security.util.CategoryProtoc.CategoryClickRequest.Builder subBuilder = com.kindroid.security.util.CategoryProtoc.CategoryClickRequest.newBuilder();
              if (hasCategoryClickRequest()) {
                subBuilder.mergeFrom(getCategoryClickRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setCategoryClickRequest(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // optional .com.kindroid.security.util.RequestContext context = 1;
      public boolean hasContext() {
        return result.hasContext();
      }
      public com.kindroid.security.util.RequestProtoc.RequestContext getContext() {
        return result.getContext();
      }
      public Builder setContext(com.kindroid.security.util.RequestProtoc.RequestContext value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasContext = true;
        result.context_ = value;
        return this;
      }
      public Builder setContext(com.kindroid.security.util.RequestProtoc.RequestContext.Builder builderForValue) {
        result.hasContext = true;
        result.context_ = builderForValue.build();
        return this;
      }
      public Builder mergeContext(com.kindroid.security.util.RequestProtoc.RequestContext value) {
        if (result.hasContext() &&
            result.context_ != com.kindroid.security.util.RequestProtoc.RequestContext.getDefaultInstance()) {
          result.context_ =
            com.kindroid.security.util.RequestProtoc.RequestContext.newBuilder(result.context_).mergeFrom(value).buildPartial();
        } else {
          result.context_ = value;
        }
        result.hasContext = true;
        return this;
      }
      public Builder clearContext() {
        result.hasContext = false;
        result.context_ = com.kindroid.security.util.RequestProtoc.RequestContext.getDefaultInstance();
        return this;
      }
      
      // optional .com.kindroid.security.util.AccountRequest accountRequest = 2;
      public boolean hasAccountRequest() {
        return result.hasAccountRequest();
      }
      public com.kindroid.security.util.AccountProtoc.AccountRequest getAccountRequest() {
        return result.getAccountRequest();
      }
      public Builder setAccountRequest(com.kindroid.security.util.AccountProtoc.AccountRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasAccountRequest = true;
        result.accountRequest_ = value;
        return this;
      }
      public Builder setAccountRequest(com.kindroid.security.util.AccountProtoc.AccountRequest.Builder builderForValue) {
        result.hasAccountRequest = true;
        result.accountRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeAccountRequest(com.kindroid.security.util.AccountProtoc.AccountRequest value) {
        if (result.hasAccountRequest() &&
            result.accountRequest_ != com.kindroid.security.util.AccountProtoc.AccountRequest.getDefaultInstance()) {
          result.accountRequest_ =
            com.kindroid.security.util.AccountProtoc.AccountRequest.newBuilder(result.accountRequest_).mergeFrom(value).buildPartial();
        } else {
          result.accountRequest_ = value;
        }
        result.hasAccountRequest = true;
        return this;
      }
      public Builder clearAccountRequest() {
        result.hasAccountRequest = false;
        result.accountRequest_ = com.kindroid.security.util.AccountProtoc.AccountRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.kindroid.security.util.EmailRequest emailRequest = 3;
      public boolean hasEmailRequest() {
        return result.hasEmailRequest();
      }
      public com.kindroid.security.util.EmailProtoc.EmailRequest getEmailRequest() {
        return result.getEmailRequest();
      }
      public Builder setEmailRequest(com.kindroid.security.util.EmailProtoc.EmailRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasEmailRequest = true;
        result.emailRequest_ = value;
        return this;
      }
      public Builder setEmailRequest(com.kindroid.security.util.EmailProtoc.EmailRequest.Builder builderForValue) {
        result.hasEmailRequest = true;
        result.emailRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeEmailRequest(com.kindroid.security.util.EmailProtoc.EmailRequest value) {
        if (result.hasEmailRequest() &&
            result.emailRequest_ != com.kindroid.security.util.EmailProtoc.EmailRequest.getDefaultInstance()) {
          result.emailRequest_ =
            com.kindroid.security.util.EmailProtoc.EmailRequest.newBuilder(result.emailRequest_).mergeFrom(value).buildPartial();
        } else {
          result.emailRequest_ = value;
        }
        result.hasEmailRequest = true;
        return this;
      }
      public Builder clearEmailRequest() {
        result.hasEmailRequest = false;
        result.emailRequest_ = com.kindroid.security.util.EmailProtoc.EmailRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.kindroid.security.util.FeedbackRequest feedbackRequest = 4;
      public boolean hasFeedbackRequest() {
        return result.hasFeedbackRequest();
      }
      public com.kindroid.security.util.FeedbackProtoc.FeedbackRequest getFeedbackRequest() {
        return result.getFeedbackRequest();
      }
      public Builder setFeedbackRequest(com.kindroid.security.util.FeedbackProtoc.FeedbackRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasFeedbackRequest = true;
        result.feedbackRequest_ = value;
        return this;
      }
      public Builder setFeedbackRequest(com.kindroid.security.util.FeedbackProtoc.FeedbackRequest.Builder builderForValue) {
        result.hasFeedbackRequest = true;
        result.feedbackRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeFeedbackRequest(com.kindroid.security.util.FeedbackProtoc.FeedbackRequest value) {
        if (result.hasFeedbackRequest() &&
            result.feedbackRequest_ != com.kindroid.security.util.FeedbackProtoc.FeedbackRequest.getDefaultInstance()) {
          result.feedbackRequest_ =
            com.kindroid.security.util.FeedbackProtoc.FeedbackRequest.newBuilder(result.feedbackRequest_).mergeFrom(value).buildPartial();
        } else {
          result.feedbackRequest_ = value;
        }
        result.hasFeedbackRequest = true;
        return this;
      }
      public Builder clearFeedbackRequest() {
        result.hasFeedbackRequest = false;
        result.feedbackRequest_ = com.kindroid.security.util.FeedbackProtoc.FeedbackRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.kindroid.security.util.AppSearchRequest appSearchRequest = 5;
      public boolean hasAppSearchRequest() {
        return result.hasAppSearchRequest();
      }
      public com.kindroid.security.util.AppProtoc.AppSearchRequest getAppSearchRequest() {
        return result.getAppSearchRequest();
      }
      public Builder setAppSearchRequest(com.kindroid.security.util.AppProtoc.AppSearchRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasAppSearchRequest = true;
        result.appSearchRequest_ = value;
        return this;
      }
      public Builder setAppSearchRequest(com.kindroid.security.util.AppProtoc.AppSearchRequest.Builder builderForValue) {
        result.hasAppSearchRequest = true;
        result.appSearchRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeAppSearchRequest(com.kindroid.security.util.AppProtoc.AppSearchRequest value) {
        if (result.hasAppSearchRequest() &&
            result.appSearchRequest_ != com.kindroid.security.util.AppProtoc.AppSearchRequest.getDefaultInstance()) {
          result.appSearchRequest_ =
            com.kindroid.security.util.AppProtoc.AppSearchRequest.newBuilder(result.appSearchRequest_).mergeFrom(value).buildPartial();
        } else {
          result.appSearchRequest_ = value;
        }
        result.hasAppSearchRequest = true;
        return this;
      }
      public Builder clearAppSearchRequest() {
        result.hasAppSearchRequest = false;
        result.appSearchRequest_ = com.kindroid.security.util.AppProtoc.AppSearchRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.kindroid.security.util.TopicRequest topicRequest = 6;
      public boolean hasTopicRequest() {
        return result.hasTopicRequest();
      }
      public com.kindroid.security.util.TopicProtoc.TopicRequest getTopicRequest() {
        return result.getTopicRequest();
      }
      public Builder setTopicRequest(com.kindroid.security.util.TopicProtoc.TopicRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasTopicRequest = true;
        result.topicRequest_ = value;
        return this;
      }
      public Builder setTopicRequest(com.kindroid.security.util.TopicProtoc.TopicRequest.Builder builderForValue) {
        result.hasTopicRequest = true;
        result.topicRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeTopicRequest(com.kindroid.security.util.TopicProtoc.TopicRequest value) {
        if (result.hasTopicRequest() &&
            result.topicRequest_ != com.kindroid.security.util.TopicProtoc.TopicRequest.getDefaultInstance()) {
          result.topicRequest_ =
            com.kindroid.security.util.TopicProtoc.TopicRequest.newBuilder(result.topicRequest_).mergeFrom(value).buildPartial();
        } else {
          result.topicRequest_ = value;
        }
        result.hasTopicRequest = true;
        return this;
      }
      public Builder clearTopicRequest() {
        result.hasTopicRequest = false;
        result.topicRequest_ = com.kindroid.security.util.TopicProtoc.TopicRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.kindroid.security.util.TopicAppRequest topicAppRequest = 7;
      public boolean hasTopicAppRequest() {
        return result.hasTopicAppRequest();
      }
      public com.kindroid.security.util.TopicProtoc.TopicAppRequest getTopicAppRequest() {
        return result.getTopicAppRequest();
      }
      public Builder setTopicAppRequest(com.kindroid.security.util.TopicProtoc.TopicAppRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasTopicAppRequest = true;
        result.topicAppRequest_ = value;
        return this;
      }
      public Builder setTopicAppRequest(com.kindroid.security.util.TopicProtoc.TopicAppRequest.Builder builderForValue) {
        result.hasTopicAppRequest = true;
        result.topicAppRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeTopicAppRequest(com.kindroid.security.util.TopicProtoc.TopicAppRequest value) {
        if (result.hasTopicAppRequest() &&
            result.topicAppRequest_ != com.kindroid.security.util.TopicProtoc.TopicAppRequest.getDefaultInstance()) {
          result.topicAppRequest_ =
            com.kindroid.security.util.TopicProtoc.TopicAppRequest.newBuilder(result.topicAppRequest_).mergeFrom(value).buildPartial();
        } else {
          result.topicAppRequest_ = value;
        }
        result.hasTopicAppRequest = true;
        return this;
      }
      public Builder clearTopicAppRequest() {
        result.hasTopicAppRequest = false;
        result.topicAppRequest_ = com.kindroid.security.util.TopicProtoc.TopicAppRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.kindroid.security.util.BannerRequest bannerRequest = 8;
      public boolean hasBannerRequest() {
        return result.hasBannerRequest();
      }
      public com.kindroid.security.util.ADProtoc.BannerRequest getBannerRequest() {
        return result.getBannerRequest();
      }
      public Builder setBannerRequest(com.kindroid.security.util.ADProtoc.BannerRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasBannerRequest = true;
        result.bannerRequest_ = value;
        return this;
      }
      public Builder setBannerRequest(com.kindroid.security.util.ADProtoc.BannerRequest.Builder builderForValue) {
        result.hasBannerRequest = true;
        result.bannerRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeBannerRequest(com.kindroid.security.util.ADProtoc.BannerRequest value) {
        if (result.hasBannerRequest() &&
            result.bannerRequest_ != com.kindroid.security.util.ADProtoc.BannerRequest.getDefaultInstance()) {
          result.bannerRequest_ =
            com.kindroid.security.util.ADProtoc.BannerRequest.newBuilder(result.bannerRequest_).mergeFrom(value).buildPartial();
        } else {
          result.bannerRequest_ = value;
        }
        result.hasBannerRequest = true;
        return this;
      }
      public Builder clearBannerRequest() {
        result.hasBannerRequest = false;
        result.bannerRequest_ = com.kindroid.security.util.ADProtoc.BannerRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.kindroid.security.util.PasswordRequest passwordRequest = 9;
      public boolean hasPasswordRequest() {
        return result.hasPasswordRequest();
      }
      public com.kindroid.security.util.AccountProtoc.PasswordRequest getPasswordRequest() {
        return result.getPasswordRequest();
      }
      public Builder setPasswordRequest(com.kindroid.security.util.AccountProtoc.PasswordRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasPasswordRequest = true;
        result.passwordRequest_ = value;
        return this;
      }
      public Builder setPasswordRequest(com.kindroid.security.util.AccountProtoc.PasswordRequest.Builder builderForValue) {
        result.hasPasswordRequest = true;
        result.passwordRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergePasswordRequest(com.kindroid.security.util.AccountProtoc.PasswordRequest value) {
        if (result.hasPasswordRequest() &&
            result.passwordRequest_ != com.kindroid.security.util.AccountProtoc.PasswordRequest.getDefaultInstance()) {
          result.passwordRequest_ =
            com.kindroid.security.util.AccountProtoc.PasswordRequest.newBuilder(result.passwordRequest_).mergeFrom(value).buildPartial();
        } else {
          result.passwordRequest_ = value;
        }
        result.hasPasswordRequest = true;
        return this;
      }
      public Builder clearPasswordRequest() {
        result.hasPasswordRequest = false;
        result.passwordRequest_ = com.kindroid.security.util.AccountProtoc.PasswordRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.kindroid.security.util.ClickRequest clickRequest = 10;
      public boolean hasClickRequest() {
        return result.hasClickRequest();
      }
      public com.kindroid.security.util.ADProtoc.ClickRequest getClickRequest() {
        return result.getClickRequest();
      }
      public Builder setClickRequest(com.kindroid.security.util.ADProtoc.ClickRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasClickRequest = true;
        result.clickRequest_ = value;
        return this;
      }
      public Builder setClickRequest(com.kindroid.security.util.ADProtoc.ClickRequest.Builder builderForValue) {
        result.hasClickRequest = true;
        result.clickRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeClickRequest(com.kindroid.security.util.ADProtoc.ClickRequest value) {
        if (result.hasClickRequest() &&
            result.clickRequest_ != com.kindroid.security.util.ADProtoc.ClickRequest.getDefaultInstance()) {
          result.clickRequest_ =
            com.kindroid.security.util.ADProtoc.ClickRequest.newBuilder(result.clickRequest_).mergeFrom(value).buildPartial();
        } else {
          result.clickRequest_ = value;
        }
        result.hasClickRequest = true;
        return this;
      }
      public Builder clearClickRequest() {
        result.hasClickRequest = false;
        result.clickRequest_ = com.kindroid.security.util.ADProtoc.ClickRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.kindroid.security.util.TopicClickRequest topicClickRequest = 11;
      public boolean hasTopicClickRequest() {
        return result.hasTopicClickRequest();
      }
      public com.kindroid.security.util.TopicProtoc.TopicClickRequest getTopicClickRequest() {
        return result.getTopicClickRequest();
      }
      public Builder setTopicClickRequest(com.kindroid.security.util.TopicProtoc.TopicClickRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasTopicClickRequest = true;
        result.topicClickRequest_ = value;
        return this;
      }
      public Builder setTopicClickRequest(com.kindroid.security.util.TopicProtoc.TopicClickRequest.Builder builderForValue) {
        result.hasTopicClickRequest = true;
        result.topicClickRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeTopicClickRequest(com.kindroid.security.util.TopicProtoc.TopicClickRequest value) {
        if (result.hasTopicClickRequest() &&
            result.topicClickRequest_ != com.kindroid.security.util.TopicProtoc.TopicClickRequest.getDefaultInstance()) {
          result.topicClickRequest_ =
            com.kindroid.security.util.TopicProtoc.TopicClickRequest.newBuilder(result.topicClickRequest_).mergeFrom(value).buildPartial();
        } else {
          result.topicClickRequest_ = value;
        }
        result.hasTopicClickRequest = true;
        return this;
      }
      public Builder clearTopicClickRequest() {
        result.hasTopicClickRequest = false;
        result.topicClickRequest_ = com.kindroid.security.util.TopicProtoc.TopicClickRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.kindroid.security.util.CategoryClickRequest categoryClickRequest = 12;
      public boolean hasCategoryClickRequest() {
        return result.hasCategoryClickRequest();
      }
      public com.kindroid.security.util.CategoryProtoc.CategoryClickRequest getCategoryClickRequest() {
        return result.getCategoryClickRequest();
      }
      public Builder setCategoryClickRequest(com.kindroid.security.util.CategoryProtoc.CategoryClickRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasCategoryClickRequest = true;
        result.categoryClickRequest_ = value;
        return this;
      }
      public Builder setCategoryClickRequest(com.kindroid.security.util.CategoryProtoc.CategoryClickRequest.Builder builderForValue) {
        result.hasCategoryClickRequest = true;
        result.categoryClickRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeCategoryClickRequest(com.kindroid.security.util.CategoryProtoc.CategoryClickRequest value) {
        if (result.hasCategoryClickRequest() &&
            result.categoryClickRequest_ != com.kindroid.security.util.CategoryProtoc.CategoryClickRequest.getDefaultInstance()) {
          result.categoryClickRequest_ =
            com.kindroid.security.util.CategoryProtoc.CategoryClickRequest.newBuilder(result.categoryClickRequest_).mergeFrom(value).buildPartial();
        } else {
          result.categoryClickRequest_ = value;
        }
        result.hasCategoryClickRequest = true;
        return this;
      }
      public Builder clearCategoryClickRequest() {
        result.hasCategoryClickRequest = false;
        result.categoryClickRequest_ = com.kindroid.security.util.CategoryProtoc.CategoryClickRequest.getDefaultInstance();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.kindroid.security.util.Request)
    }
    
    static {
      defaultInstance = new Request(true);
      com.kindroid.security.util.RequestProtoc.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.kindroid.security.util.Request)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_kindroid_security_util_RequestContext_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_kindroid_security_util_RequestContext_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_kindroid_security_util_Request_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_kindroid_security_util_Request_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\023RequestProtoc.proto\022\032com.kindroid.secu" +
      "rity.util\032\023AccountProtoc.proto\032\021EmailPro" +
      "toc.proto\032\024FeedbackProtoc.proto\032\017AppProt" +
      "oc.proto\032\021TopicProtoc.proto\032\016ADProtoc.pr" +
      "oto\032\024CategoryProtoc.proto\"#\n\016RequestCont" +
      "ext\022\021\n\tauthToken\030\001 \001(\t\"\300\006\n\007Request\022;\n\007co" +
      "ntext\030\001 \001(\0132*.com.kindroid.security.util" +
      ".RequestContext\022B\n\016accountRequest\030\002 \001(\0132" +
      "*.com.kindroid.security.util.AccountRequ" +
      "est\022>\n\014emailRequest\030\003 \001(\0132(.com.kindroid",
      ".security.util.EmailRequest\022D\n\017feedbackR" +
      "equest\030\004 \001(\0132+.com.kindroid.security.uti" +
      "l.FeedbackRequest\022F\n\020appSearchRequest\030\005 " +
      "\001(\0132,.com.kindroid.security.util.AppSear" +
      "chRequest\022>\n\014topicRequest\030\006 \001(\0132(.com.ki" +
      "ndroid.security.util.TopicRequest\022D\n\017top" +
      "icAppRequest\030\007 \001(\0132+.com.kindroid.securi" +
      "ty.util.TopicAppRequest\022@\n\rbannerRequest" +
      "\030\010 \001(\0132).com.kindroid.security.util.Bann" +
      "erRequest\022D\n\017passwordRequest\030\t \001(\0132+.com",
      ".kindroid.security.util.PasswordRequest\022" +
      ">\n\014clickRequest\030\n \001(\0132(.com.kindroid.sec" +
      "urity.util.ClickRequest\022H\n\021topicClickReq" +
      "uest\030\013 \001(\0132-.com.kindroid.security.util." +
      "TopicClickRequest\022N\n\024categoryClickReques" +
      "t\030\014 \001(\01320.com.kindroid.security.util.Cat" +
      "egoryClickRequestB\034\n\032com.kindroid.securi" +
      "ty.util"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_com_kindroid_security_util_RequestContext_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_com_kindroid_security_util_RequestContext_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_kindroid_security_util_RequestContext_descriptor,
              new java.lang.String[] { "AuthToken", },
              com.kindroid.security.util.RequestProtoc.RequestContext.class,
              com.kindroid.security.util.RequestProtoc.RequestContext.Builder.class);
          internal_static_com_kindroid_security_util_Request_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_com_kindroid_security_util_Request_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_kindroid_security_util_Request_descriptor,
              new java.lang.String[] { "Context", "AccountRequest", "EmailRequest", "FeedbackRequest", "AppSearchRequest", "TopicRequest", "TopicAppRequest", "BannerRequest", "PasswordRequest", "ClickRequest", "TopicClickRequest", "CategoryClickRequest", },
              com.kindroid.security.util.RequestProtoc.Request.class,
              com.kindroid.security.util.RequestProtoc.Request.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.kindroid.security.util.AccountProtoc.getDescriptor(),
          com.kindroid.security.util.EmailProtoc.getDescriptor(),
          com.kindroid.security.util.FeedbackProtoc.getDescriptor(),
          com.kindroid.security.util.AppProtoc.getDescriptor(),
          com.kindroid.security.util.TopicProtoc.getDescriptor(),
          com.kindroid.security.util.ADProtoc.getDescriptor(),
          com.kindroid.security.util.CategoryProtoc.getDescriptor(),
        }, assigner);
  }
  
  public static void internalForceInit() {}
  
  // @@protoc_insertion_point(outer_class_scope)
}
